AWSTemplateFormatVersion: 2010-09-09
Description: >
  Launches AWS Fargate resources and then spins or updates containers in them.
  Networking resources have been referenced from an already-created stack (in the same region) with help of 'ImportValue'.
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - "development"
      - "staging"
      - "production"
  ProjectName:
    Type: String
    Description: Provide ProjectName which should be same as Name in VPC.
  HostedZoneId:
    Type: String
    Description: Provide Hosted Zone ID for Domain.
  DomainName:
    Type: String
    Description: Provide Domain for certificates.
  scheduleStop:
    Type: String
    Default: "no"
    Description: Do you want to STOP this environment in Off Working Hours? (yes/no)
    AllowedValues:
      - "yes"
      - "no"

Conditions:
  IsDevelopment: !Equals [!Ref Environment, "development"]
  IsStaging: !Equals [!Ref Environment, "staging"]
  IsProduction: !Equals [!Ref Environment, "production"]
Resources:
################[ SSL Certificates Section ]######################################
  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName:
        !If [
          IsDevelopment,
          !Join [".", ["*.d", !Ref DomainName]],
          !If [
            IsStaging,
            !Join [".", ["*.s", !Ref DomainName]],
            !If [
              IsProduction,
              !Join [".", ["*", !Ref DomainName]],
              !Ref "AWS::NoValue",
            ],
          ],
        ]
      DomainValidationOptions:
        - DomainName:
            !If [
              IsDevelopment,
              !Join [".", ["*.d", !Ref DomainName]],
              !If [
                IsStaging,
                !Join [".", ["*.s", !Ref DomainName]],
                !If [
                  IsProduction,
                  !Join [".", ["*", !Ref DomainName]],
                  !Ref "AWS::NoValue",
                ],
              ],
            ]
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

################[ Elastic Load Balancing Section ]######################################
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      IpAddressType: "ipv4"
      Subnets:
        - Fn::ImportValue: !Join ["-", [!Ref ProjectName, PublicSubnetA]]
        - Fn::ImportValue: !Join ["-", [!Ref ProjectName, PublicSubnetB]]
      SecurityGroups:
        - !Ref AlbSecurityGroup
    DependsOn: AlbSecurityGroup
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId:
        Fn::ImportValue: !Join ["-", [!Ref ProjectName, VPC]]
      SecurityGroupIngress: # Hint: inbound rules
        - Description: "Port 80 allowed from anywhere"
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: "Port 443 allowed from anywhere"
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: "Port 22 allowed from PK office"
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 182.191.92.49/32

################[ HTTP(S) Listeners Section ]######################################

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: "HTTP"
      Port: 80
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            StatusCode: "HTTP_301"
  
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: "HTTPS"
      Port: 443
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '200'
            ContentType: 'text/plain'
            MessageBody: 'healthy .. waiting for deployments.'
          Order: 1
    DependsOn: 
      - Certificate

################[ LogGroup and Secret Section ]######################################
  # LogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     RetentionInDays: 14
  # Secret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties: {}

################[ Fargate Cluster Section ]######################################
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: FARGATE
          Weight: 1
        - Base: 0
          CapacityProvider: FARGATE_SPOT
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: scheduleStop
          Value: !If [IsProduction, "no", !Ref scheduleStop]
  
Outputs:
  Cluster:
    Description: "Your cluster"
    Value: !GetAtt FargateCluster.Arn
    Export:
      Name: !Join ['-', [!Ref ProjectName, !Ref Environment, Cluster]]
  LoadBalancerDNS:
    Description: "Your Application Load Balancer DNS. This can be used as A-Record in Route53"
    Value: !GetAtt Alb.DNSName
    Export:
      Name: !Join ['-', [!Ref ProjectName, !Ref Environment, alb, DNSName]]
  LoadBalancerARN:
    Description: "Your Application Load Balancer ARN"
    Value: !Ref Alb
    Export:
      Name: !Join ['-', [!Ref ProjectName, !Ref Environment, alb, arn]]
  HttpsListenerARN:
    Description: "HttpsListenerARN"
    Value: !GetAtt HttpsListener.ListenerArn 
    Export:
      Name: !Join ['-', [!Ref ProjectName, !Ref Environment, HttpsListenerARN]]
  CertificateARN:
    Description: "CertificateARN"
    Value: !Ref Certificate
    Export:
      Name: !Join ['-', [!Ref ProjectName, !Ref Environment, Certificate]]